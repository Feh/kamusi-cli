#!/usr/bin/perl
# (c) Julius Plenz

use strict;
use warnings;
use DBI;
use Term::ANSIColor;
use Getopt::Std;

my $dbargs = {AutoCommit => 0, PrintError => 1};
my $dbh = DBI->connect("dbi:SQLite:dbname=words.db", "", "", $dbargs);

my $direction = "en";
my %property = (
    "direction" , "en",
    "type" , "",
    "verbose" , 0,
    "examples" , 1,
    "squash", 0
);

my %opts = ();
getopts('vEsqt:d:', \%opts);

# search direction [default sw->en; no sanity check]
set_property("direction", $opts{"d"}) if $opts{"d"};
set_property("type", $opts{"t"}) if $opts{"t"};
set_property("verbose", 1) if $opts{"v"};
set_property("examples", 0) if $opts{"E"}; # no examples
set_property("squash", 1) if $opts{"s"};

if($opts{"q"}) {
    unless($ARGV[0]) {
        print STDERR "no word given on command line; exiting.";
        exit 1;
    }
    query_word($ARGV[0]);
    goto QUIT;
}

show_prompt();
while ($_ = <STDIN>) {
    chomp;
    goto QUIT if /^\.q$/i;
    next if /^\s*$/;
    if ($_ =~ /^\./) {
        set_property_from_command($_);
    } else {
        query_word($_);
    }
    show_prompt();
}

sub show_prompt {
    print color 'bold';
    print 'kamusi> ';
    print color 'reset';
}

sub set_property {
    (my $prop, my $val) = @_;
    $property{$prop} = $val;
}

sub set_property_from_command {
    (my $prop, my $arg) = split / /;
    SWITCH: {
        $prop =~ /.en/ && do {
            set_property("direction", "en");
            print "now searching en -> sw.\n";
            last;
        };
        $prop =~ /.sw/ && do {
            set_property("direction", "sw");
            print "now searching sw -> en.\n";
            last;
        };
        $prop =~ /.v/ && do {
            set_property("verbose", !$property{"verbose"});
            print "verbose output turned " . ($property{"verbose"}?"on":"off") . ".\n";
            last;
        };
        $prop =~ /.ex/ && do {
            set_property("examples", !$property{"examples"});
            print "example output turned " . ($property{"examples"}?"on":"off") . ".\n";
            last;
        };
        $prop =~ /.sq/ && do {
            set_property("squash", !$property{"squash"});
            print "squashing turned " . ($property{"squash"}?"on":"off") . ".\n";
            last;
        };
        $prop =~ /.t/ && do {
            if (!defined ($arg)) {
                set_property("type", "");
                print "will display results of all types.\n";
            } else {
                $arg =~ s/^(\w+).*$/$1/;
                set_property("type", $arg);
                print "will only display results of type '$arg'.\n";
            }
            last;
        };
    }
}

sub query_word {
    my $table;
    my $word = shift;
    my $entry_handler = $property{"squash"} ? \&squash_result : \&display_entry;

    $table = "english" if $property{"direction"} =~ /en/;
    $table = "swahili" if $property{"direction"} =~ /sw/;
    unless($table) {
        print "Cannot understand search direction; assuming default!\n";
        $table = "english";
    }
    my $type_query = "";
    if(defined($property{"type"}) && $property{"type"} !~ /^$/) {
        $type_query = "AND part_of_speech LIKE '$property{type}'";
    }

    my $row;
    my $q = $dbh->prepare("SELECT * FROM ".$table." WHERE ".$table."_word LIKE ? " .
        $type_query . " ORDER BY part_of_speech ASC;");
    $q->execute("$word");
    while ($row = $q->fetchrow_hashref) {
        &$entry_handler($row);
    }
    display_squash_results() if $property{"squash"};
}


sub display_entry {
    my $entry = shift;

    printf("%s: %s = {{ %s }} \n", $$entry{"part_of_speech"},
        $$entry{"swahili_word"}, $$entry{"english_word"});
    if($property{"verbose"} && ($$entry{"swahili_plural"} || $$entry{"english_plural"})) {
        printf("%-38s  %-38s \n",
            $$entry{"swahili_plural"}?"Pl. ".$$entry{"swahili_plural"}:"",
            $$entry{"english_plural"}?"Pl. ".$$entry{"english_plural"}:"");
    }
    # examples
    if ($property{"examples"}) {
        print "    | Example: ".$$entry{"english_example"}."\n" if $$entry{"english_example"};
        print "    | Example: ".$$entry{"swahili_example"}."\n" if $$entry{"swahili_example"};
    }
    if ($property{"verbose"}) {
        # definitions
        print "               | Def.: ".$$entry{"english_definition"}."\n" if $$entry{"english_definition"};
        print "               | Def.: ".$$entry{"swahili_definition"}."\n" if $$entry{"swahili_definition"};
        # class/type/terminol/dialect
        if($$entry{"class"} || $$entry{"terminology"} || $$entry{"dialect"}) {
            printf("    | %-10s  %-15s  %-20s\n",
                $$entry{"class"}?"Class: ".$$entry{"class"}:"",
                $$entry{"terminology"}?"Term.: ".$$entry{"terminology"}:"",
                $$entry{"dialect"}?"Dialect: ".$$entry{"dialect"}:""
            );
        }
    }
}

BEGIN {
    my %buffer = ();
    sub squash_result {
        my $entry = shift;
        push(@{$buffer{$$entry{"part_of_speech"}}},
            ($property{"direction"} =~ "en") ?  $$entry{"swahili_word"} :
                                                $$entry{"english_word"});
    }
    sub display_squash_results {
        for my $type (keys %buffer) {
            print $type . ': ' . join('; ', @{$buffer{$type}}) . "\n";
        }
        %buffer = ();
    }
}

QUIT:
print STDERR "kamusi exiting...\n" unless $opts{"q"};
$dbh->disconnect();

# vim:set nowrap et ts=4:
